AWSTemplateFormatVersion: '2010-09-09'
Description: "Manages All Kong-related Service and Application Scaling"

Resources:

  # TODO: Dynamically scale ECS Cluster via CloudWatch alarms (similar to service scaling)

  ###########################################################
  #                                                         #
  #   SERVICE SCALING                                       #
  #                                                         #
  ###########################################################
  ServiceCPUAlarmScaleUp:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Alarm if the service CPU exceeds the reserved amount
      Namespace: AWS/ECS
      Dimensions:
      - Name: ClusterName
        Value: !ImportValue KongECSCluster
      - Name: ServiceName
        Value: !ImportValue KongServiceName
      MetricName: CPUUtilization
      Statistic: Average
      ComparisonOperator: GreaterThanThreshold
      Threshold: 100
      # Minute duration
      EvaluationPeriods: 1
      Period: 60 #Seconds
      AlarmActions:
      - !Ref ServiceScaleUpPolicy

  ServiceCPUAlarmScaleDown:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Alarm if the service CPU usage is halved
      Namespace: AWS/ECS
      Dimensions:
      - Name: ClusterName
        Value: !ImportValue KongECSCluster
      - Name: ServiceName
        Value: !ImportValue KongServiceName
      MetricName: CPUUtilization
      Statistic: Average
      ComparisonOperator: LessThanOrEqualToThreshold
      Threshold: 50
      # Minute duration
      EvaluationPeriods: 5
      Period: 60 #Seconds
      AlarmActions:
      - !Ref ServiceScaleDownPolicy

  ServiceScaleUpPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Join ['-', [ 'Kong', !Ref ResourceSuffix, 'ScaleUpPolicy' ]]
      PolicyType: StepScaling
      ScalingTargetId: !Ref ServiceScalingTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: ChangeInCapacity
        Cooldown: 60
        MetricAggregationType: Average
        StepAdjustments:
        - MetricIntervalLowerBound: 0
          ScalingAdjustment: 1

  ServiceScaleDownPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Join ['-', [ 'Kong', !Ref ResourceSuffix, 'ScaleDownPolicy' ]]
      PolicyType: StepScaling
      ScalingTargetId: !Ref ServiceScalingTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: ChangeInCapacity
        Cooldown: 60
        MetricAggregationType: Average
        StepAdjustments:
        - MetricIntervalUpperBound: 0
          ScalingAdjustment: -1

  ServiceScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    # DependsOn: KongService
    Properties:
      MaxCapacity: 3
      MinCapacity: 1
      ResourceId: !Join ['', [ 'service/', !ImportValue KongECSCluster, '/', !ImportValue KongServiceName ]]
      RoleARN: !GetAtt ServiceAutoscalingRole.Arn
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
