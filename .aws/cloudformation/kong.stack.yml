AWSTemplateFormatVersion: '2010-09-09'
Description: "Manages the infrastructure and applications for the Kong API Gateway and associated Administration UI"

Parameters:
  LatestAmiId:
    Description: "The Latest AMI with the ECS Agent"
    Type: "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>"
    Default: "/aws/service/ecs/optimized-ami/amazon-linux/recommended/image_id"
  SelectedVPC:
    Description: "The VPC in which to install Kong"
    Type: "AWS::EC2::VPC::Id"
  KeyPair:
    Description: "The KeyPair to associate with EC2 instances"
    Type: "AWS::EC2::KeyPair::KeyName"
    ConstraintDescription: "Must be the name of an existing EC2 KeyPair."
  ImageSize:
    Description: "The size of the EC2 images added to the ECS cluster"
    Type: "String"
    Default: t2.small
    AllowedValues:
    - t1.micro
    - t2.nano
    - t2.micro
    - t2.small
  InstanceAutoScalingMaxSize:
    Description: "Maximum number of EC2 instances to scale"
    Type: "Number"
    Default: "1"
  InstanceAutoScalingDesiredSize:
    Description: "Desired number of EC2 instances to consider healthy"
    Type: "Number"
    Default: "1"
  KongDatabaseName: # TODO: Provide Validations
    Type: "String"
    Default: "kong"
  KongaDatabaseName: # TODO: Provide Validations
    Type: "String"
    Default: "konga"
  DatabaseUser: # TODO: Provide Validations
    Type: "String"
    Default: "kong"
  DatabasePassword:
    Type: "String"
    NoEcho: true
    MinLength: "16"
    MaxLength: "32"
    ConstraintDescription: "Must be a String between 16 and 32 characters long."
  DatabaseSnapshotName:
    Type: "String"
    Default: ""


# TODO: Obviously these should be auto-generated and not hardcoded.
Mappings:
  VPCSubnets:
    vpc-c107d5ba:
      useast1a: subnet-84fcacd9
      useast1b: subnet-1ad1d47e
      useast1c: subnet-cd0955e2
      useast1d: subnet-e631d5ac
      useast1e: subnet-77174748
      useast1f: subnet-e95680e6

Resources:

  ###########################################################
  #                                                         #
  #   S3 BUCKETS                                            #
  #                                                         #
  ###########################################################

  # S3Bucket:
    # Type: "AWS::S3::Bucket"
    # Properties: {}


  ###########################################################
  #                                                         #
  #   SECURITY GROUPS                                       #
  #                                                         #
  ###########################################################

  KongALBSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupName: "Kong ALB"
      GroupDescription: !Sub "Security Group for Kong Load Balancer (${SelectedVPC})"
      VpcId: !Ref SelectedVPC

  KongInternalALBSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupName: "Kong Internal ALB"
      GroupDescription: !Sub "Security Group for Kong Internal Load Balancer (${SelectedVPC})"
      VpcId: !Ref SelectedVPC
      SecurityGroupIngress:
      - Description: "Internal-only Port Exposure for Kong ECS Back-Routing"
        SourceSecurityGroupId: !Ref KongECSSecurityGroup
        IpProtocol: tcp
        FromPort: 8080
        ToPort: 8080

  KongECSSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupName: "Kong Cluster ECS"
      GroupDescription: !Sub "Security Group for Kong/Konga ECS (${SelectedVPC})"
      VpcId: !Ref SelectedVPC
      SecurityGroupIngress:
      - Description: "Allows Ingress to Kong/Konga ECS Instances from the Public ALB"
        SourceSecurityGroupId: !Ref KongALBSecurityGroup
        IpProtocol: tcp
        FromPort: 1
        ToPort: 65535

  KongDatabaseSecurityGroupAllowsKongECSIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !ImportValue KongDatabaseSecurityGroup
      Description: "Ingress from Kong/Konga ECS"
      SourceSecurityGroupId: !Ref KongECSSecurityGroup
      IpProtocol: tcp
      ToPort: 5432
      FromPort: 5432

  ###########################################################
  #                                                         #
  #   CLOUDWATCH LOG GROUPS                                 #
  #                                                         #
  ###########################################################
  CloudWatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['-', [ 'ECSLogs', !Ref 'AWS::StackName' ]]
      RetentionInDays: 7

  ###########################################################
  #                                                         #
  #   SSL CERTIFICATES                                      #
  #                                                         #
  ###########################################################
  KongaSSLCertificate:
    Type: "AWS::CertificateManager::Certificate"
    Properties:
      DomainName: kong.console.bonkers.tech
      DomainValidationOptions:
      - DomainName: kong.console.bonkers.tech
        ValidationDomain: bonkers.tech

  ###########################################################
  #                                                         #
  #   ECS CLUSTERS                                          #
  #                                                         #
  ###########################################################
  KongECSCluster:
    Type: "AWS::ECS::Cluster"
    Properties:
      ClusterName: Kong

  ###########################################################
  #                                                         #
  #   EC2 INSTANCES (ECS)                                   #
  #                                                         #
  ###########################################################
  KongECSInstanceLaunchConfiguration:
    Type: "AWS::AutoScaling::LaunchConfiguration"
    CreationPolicy:
      ResourceSignal:
        Timeout: PT5M
    Metadata:
      Comment: Install CFN Init, CFN Hup, and ECS Config
      AWS::CloudFormation::Init:
        configSets:
          SetupEnvironment:
          - setupCfnHup
          - setupECSConfig
          UpdateEnvironment:
          - setupECSConfig
        setupECSConfig:
          files:
            "/etc/ecs/ecs.config":
              # See: https://docs.aws.amazon.com/AmazonECS/latest/developerguide/container-metadata.html
              content: !Sub |
                ECS_CLUSTER=${KongECSCluster}
                ECS_ENABLE_CONTAINER_METADATA=true
              mode: "000400"
              owner: "root"
              group: "root"
        setupCfnHup:
          files:
            "/etc/cfn/cfn-hup.conf":
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                interval=10
                verbose=true
              mode: "000400"
              owner: "root"
              group: "root"
            "/etc/cfn/hooks.d/cfn-auto-reloader.conf":
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.KongECSInstanceLaunchConfiguration.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init --verbose --stack ${AWS::StackName} --resource KongECSInstanceLaunchConfiguration --region ${AWS::Region} --configsets UpdateEnvironment
                runas=root
              mode: "000400"
              owner: "root"
              group: "root"
          services:
            sysvinit:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                - '/etc/cfn/cfn-hup.conf'
                - '/etc/cfn/hooks.d/cfn-auto-reloader.conf'
    Properties:
      KeyName: !Ref KeyPair
      IamInstanceProfile: !ImportValue ecsInstanceRole
      ImageId: !Ref LatestAmiId
      InstanceType: !Ref ImageSize
      SecurityGroups:
        - !Ref KongECSSecurityGroup
        - !ImportValue PersonalSSHIngress
      UserData:
        "Fn::Base64":
          !Sub |
            #!/bin/bash -xe

            # Get the latest CloudFormation package
            yum install -y aws-cfn-bootstrap
            # Start cfn-init
            /opt/aws/bin/cfn-init --verbose --stack ${AWS::StackName} --resource KongECSInstanceLaunchConfiguration --region ${AWS::Region} --configsets SetupEnvironment,UpdateEnvironment
            # All done so signal success
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource KongECSInstanceAutoScalingGroup --region ${AWS::Region}

  KongECSInstanceAutoScalingGroup:
    Type: "AWS::AutoScaling::AutoScalingGroup"
    Properties:
      AvailabilityZones:
      # NOTE: In alignment with the Kong LBs
      - "us-east-1a"
      - "us-east-1c"
      - "us-east-1d"
      LaunchConfigurationName: !Ref KongECSInstanceLaunchConfiguration
      MinSize: 1
      MaxSize: !Ref InstanceAutoScalingMaxSize
      DesiredCapacity: !Ref InstanceAutoScalingDesiredSize
    CreationPolicy:
      ResourceSignal:
        Timeout: PT10M
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: true

  ###########################################################
  #                                                         #
  #   ECS TASK DEFINITIONS                                  #
  #                                                         #
  ###########################################################
  KongTaskDefinition:
    Type: "AWS::ECS::TaskDefinition"
    Properties:
      Family: "kong"
      ContainerDefinitions:
      - Cpu: 512
        Environment:
        - Name: "KONG_DATABASE"
          Value: "postgres"
        - Name: "KONG_PG_HOST"
          Value: !ImportValue KongDatabaseDNSAddress
        - Name: "KONG_PG_DATABASE"
          Value: !Ref KongDatabaseName
        - Name: "KONG_PG_USER"
          Value: !Ref DatabaseUser
        - Name: "KONG_PG_PASSWORD"
          Value: !Ref DatabasePassword
        - Name: "KONG_PROXY_ACCESS_LOG"
          Value: "/dev/stdout"
        - Name: "KONG_PROXY_ERROR_LOG"
          Value: "/dev/stderr"
        Image: "kong:0.14.0-alpine"
        MemoryReservation: 400
        Name: "kong"
        PortMappings:
        - ContainerPort: 8000
          Protocol: "tcp"
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: !Ref CloudWatchLogsGroup
            awslogs-region: !Ref 'AWS::Region'
            awslogs-stream-prefix: 'kong'

  KongaTaskDefinition:
    Type: "AWS::ECS::TaskDefinition"
    Properties:
      Family: "konga"
      ContainerDefinitions:
      - Cpu: 256
        Environment:
        - Name: "DB_ADAPTER"
          Value: "postgres"
        - Name: "DB_HOST"
          Value: !ImportValue KongDatabaseDNSAddress
        - Name: "DB_DATABASE"
          Value: !Ref KongaDatabaseName
        - Name: "DB_USER"
          Value: !Ref DatabaseUser
        - Name: "DB_PASSWORD"
          Value: !Ref DatabasePassword
        - Name: "NODE_ENV"
          Value: "production"
        Image: "pantsel/konga:0.11.2"
        Links:
        - "kongadmin:kongadmin"
        MemoryReservation: 200
        Name: "konga"
        PortMappings:
        - ContainerPort: 1337
          Protocol: "tcp"
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: !Ref CloudWatchLogsGroup
            awslogs-region: !Ref 'AWS::Region'
            awslogs-stream-prefix: 'kong'
      - Cpu: 128
        Environment:
        - Name: "KONG_DATABASE"
          Value: "postgres"
        - Name: "KONG_PG_HOST"
          Value: !ImportValue KongDatabaseDNSAddress
        - Name: "KONG_PG_DATABASE"
          Value: !Ref KongDatabaseName
        - Name: "KONG_PG_USER"
          Value: !Ref DatabaseUser
        - Name: "KONG_PG_PASSWORD"
          Value: !Ref DatabasePassword
        - Name: "KONG_ADMIN_ACCESS_LOG"
          Value: "/dev/stdout"
        - Name: "KONG_ADMIN_ERROR_LOG"
          Value: "/dev/stderr"
        - Name: "KONG_ADMIN_LISTEN"
          Value: "0.0.0.0:8001"
        Image: "kong:0.14.0-alpine"
        MemoryReservation: 200
        Name: "kongadmin"
        PortMappings:
        - ContainerPort: 8001
          Protocol: "tcp"
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: !Ref CloudWatchLogsGroup
            awslogs-region: !Ref 'AWS::Region'
            awslogs-stream-prefix: 'admin'

  KongMigrationTaskDefinition:
    Type: "AWS::ECS::TaskDefinition"
    Properties:
      Family: "kongmigration"
      ContainerDefinitions:
      - Cpu: 256
        Environment:
        - Name: "KONG_DATABASE"
          Value: "postgres"
        - Name: "KONG_PG_HOST"
          Value: !ImportValue KongDatabaseDNSAddress
        - Name: "KONG_PG_DATABASE"
          Value: !Ref KongDatabaseName
        - Name: "KONG_PG_USER"
          Value: !Ref DatabaseUser
        - Name: "KONG_PG_PASSWORD"
          Value: !Ref DatabasePassword
        - Name: "KONG_PROXY_ACCESS_LOG"
          Value: "/dev/stdout"
        - Name: "KONG_PROXY_ERROR_LOG"
          Value: "/dev/stderr"
        Image: "kong:0.14.0-alpine"
        Command: [ "kong", "migrations", "up" ]
        MemoryReservation: 256
        Name: "kongmigration"
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: !Ref CloudWatchLogsGroup
            awslogs-region: !Ref 'AWS::Region'
            awslogs-stream-prefix: 'kongmigration'

  KongaMigrationTaskDefinition:
    Type: "AWS::ECS::TaskDefinition"
    Properties:
      Family: "kongamigration"
      ContainerDefinitions:
      - Cpu: 256
        Environment:
        - Name: "DB_ADAPTER"
          Value: "postgres"
        - Name: "DB_HOST"
          Value: !ImportValue KongDatabaseDNSAddress
        - Name: "DB_DATABASE"
          Value: !Ref KongaDatabaseName
        - Name: "DB_USER"
          Value: !Ref DatabaseUser
        - Name: "DB_PASSWORD"
          Value: !Ref DatabasePassword
        - Name: "NODE_ENV"
          Value: "dev"
        Image: "pantsel/konga:0.11.2"
        MemoryReservation: 256
        Name: "kongamigration"
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: !Ref CloudWatchLogsGroup
            awslogs-region: !Ref 'AWS::Region'
            awslogs-stream-prefix: 'kongamigration'

  ###########################################################
  #                                                         #
  #   ECS SERVICE DEFINITIONS                               #
  #                                                         #
  ###########################################################
  KongService:
    Type: "AWS::ECS::Service"
    DependsOn:
    - KongECSInstanceAutoScalingGroup
    - KongALBSecureListener
    Properties:
      Cluster: !Ref KongECSCluster
      ServiceName: "kong"
      TaskDefinition: !Ref KongTaskDefinition
      Role: !ImportValue ecsServiceRole
      DesiredCount: 1
      LoadBalancers:
      - ContainerName: "kong"
        ContainerPort: 8000
        TargetGroupArn: !Ref KongALBTargetGroup
      # DeploymentConfiguration:
        # MaximumPercent: Integer
        # MinimumHealthyPercent: Integer

  KongaService:
    Type: "AWS::ECS::Service"
    DependsOn:
    - KongECSInstanceAutoScalingGroup
    - KongaListenerRule
    Properties:
      Cluster: !Ref KongECSCluster
      ServiceName: "konga"
      TaskDefinition: !Ref KongaTaskDefinition
      Role: !ImportValue ecsServiceRole
      DesiredCount: 1
      LoadBalancers:
      - ContainerName: "konga"
        ContainerPort: 1337
        TargetGroupArn: !Ref KongaALBTargetGroup
      # DeploymentConfiguration:
        # MaximumPercent: Integer
        # MinimumHealthyPercent: Integer

  ###########################################################
  #                                                         #
  #   ELB v2 TARGET GROUPS                                  #
  #                                                         #
  ###########################################################
  KongALBTargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      Port: 8000
      Protocol: "HTTP"
      HealthCheckProtocol: "HTTP"
      HealthCheckPort: "traffic-port"
      HealthCheckPath: "/"
      Matcher:
        HttpCode: 404
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 5
      UnhealthyThresholdCount: 3
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: 300
      - Key: stickiness.enabled
        Value: false
      TargetType: "instance"
      VpcId: !Ref SelectedVPC

  KongaALBTargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      Port: 1337
      Protocol: "HTTP"
      HealthCheckProtocol: "HTTP"
      HealthCheckPort: "traffic-port"
      HealthCheckPath: "/"
      Matcher:
        HttpCode: 200
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 5
      UnhealthyThresholdCount: 3
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: 300
      - Key: stickiness.enabled
        Value: false
      TargetType: "instance"
      VpcId: !Ref SelectedVPC

  # Dummy No-op Target Group to assign to default rule for Internal ALB
  KongInternalALBTargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      Port: 80
      Protocol: "HTTP"
      HealthCheckProtocol: "HTTP"
      HealthCheckPort: "traffic-port"
      HealthCheckPath: "/"
      Matcher:
        HttpCode: 200
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 5
      UnhealthyThresholdCount: 3
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: 300
      - Key: stickiness.enabled
        Value: false
      TargetType: "instance"
      VpcId: !Ref SelectedVPC

  ###########################################################
  #                                                         #
  #   ELB v2 APPLICATION LOAD BALANCERS                     #
  #                                                         #
  ###########################################################
  KongApplicationLoadBalancer:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      SecurityGroups:
      - !Ref KongALBSecurityGroup
      - !ImportValue PublicHTTPSIngress
      Subnets:
      - !FindInMap [VPCSubnets, !Ref SelectedVPC, useast1a]
      - !FindInMap [VPCSubnets, !Ref SelectedVPC, useast1c]
      - !FindInMap [VPCSubnets, !Ref SelectedVPC, useast1d]
      Type: application
      Scheme: internet-facing
      IpAddressType: ipv4
      LoadBalancerAttributes:
      - Key: deletion_protection.enabled
        Value: false
      - Key: idle_timeout.timeout_seconds
        Value: 60
      - Key: routing.http2.enabled
        Value: true
      - Key: access_logs.s3.enabled
        Value: false

  KongInternalApplicationLoadBalancer:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      SecurityGroups:
      - !Ref KongInternalALBSecurityGroup
      Subnets:
      - !FindInMap [VPCSubnets, !Ref SelectedVPC, useast1a]
      - !FindInMap [VPCSubnets, !Ref SelectedVPC, useast1c]
      - !FindInMap [VPCSubnets, !Ref SelectedVPC, useast1d]
      Type: application
      Scheme: internal
      IpAddressType: ipv4
      LoadBalancerAttributes:
      - Key: deletion_protection.enabled
        Value: false
      - Key: idle_timeout.timeout_seconds
        Value: 60
      - Key: routing.http2.enabled
        Value: true
      - Key: access_logs.s3.enabled
        Value: false

  ###########################################################
  #                                                         #
  #   ELB v2 ALB LISTENERS                                  #
  #                                                         #
  ###########################################################
  KongALBSecureListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      LoadBalancerArn: !Ref KongApplicationLoadBalancer
      Certificates:
      - CertificateArn: !Ref KongaSSLCertificate
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref KongALBTargetGroup
      Port: 443
      Protocol: HTTPS

  # There may be a bug on the AWS side - although there is no SG to allow this,
  #  without an HTTP Listener attached, Health Checks consistently fail.
  KongALBInsecureListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      LoadBalancerArn: !Ref KongApplicationLoadBalancer
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref KongALBTargetGroup
      Port: 80
      Protocol: HTTP

  KongInternalALBListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      LoadBalancerArn: !Ref KongInternalApplicationLoadBalancer
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref KongInternalALBTargetGroup # Send to Dummy group
      Port: 8080
      Protocol: HTTP

  ###########################################################
  #                                                         #
  #   ELB v2 ALB RULE CONFIGURATIONS (Konga)                #
  #                                                         #
  ###########################################################
  KongaListenerRule:
    Type: "AWS::ElasticLoadBalancingV2::ListenerRule"
    Properties:
      Actions:
      - Type: forward
        TargetGroupArn: !Ref KongaALBTargetGroup
      Conditions:
      - Field: host-header
        Values:
        - "kong.console.bonkers.tech"
      ListenerArn: !Ref KongALBSecureListener
      Priority: 1

  ###########################################################
  #                                                         #
  #   SERVICE ROLES                                         #
  #                                                         #
  ###########################################################
  ServiceAutoscalingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - 'application-autoscaling.amazonaws.com'
          Action:
          - 'sts:AssumeRole'
      Path: /
      Policies:
      - PolicyName: service-autoscaling
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - 'application-autoscaling:*'
            - 'cloudwatch:DescribeAlarms'
            - 'cloudwatch:PutMetricAlarm'
            - 'ecs:DescribeServices'
            - 'ecs:UpdateService'
            Resource: '*'

Outputs:
  KongALBSecurityGroup:
    Description: SG to be assigned to the Kong ALB
    Value: !Ref KongALBSecurityGroup
    Export:
      Name: KongALBSecurityGroup
  KongECSSecurityGroup:
    Description: SG to be assigned to the Kong ECS Instances
    Value: !Ref KongECSSecurityGroup
    Export:
      Name: KongECSSecurityGroup
  KongInternalALBSecurityGroup:
    Description: SG to be given Ingress on API ECS Instances
    Value: !Ref KongInternalALBSecurityGroup
    Export:
      Name: KongInternalALBSecurityGroup
  KongApplicationLoadBalancer:
    Description: Kong Application Load Balancer
    Value: !Ref KongApplicationLoadBalancer
    Export:
      Name: KongApplicationLoadBalancer
  KongALBSecureListener:
    Description: The secure/public Kong ALB Listener for certificate attachment
    Value: !Ref KongALBSecureListener
    Export:
      Name: KongALBSecureListener
  KongInternalALBListener:
    Description: Kong Internal ALB Listener for target group attachment
    Value: !Ref KongInternalALBListener
    Export:
      Name: KongInternalALBListener
  KongPublicDNSAddress:
    Description: The public DNS address of the Kong ALB
    Value: !GetAtt KongApplicationLoadBalancer.DNSName
    Export:
      Name: KongPublicDNSAddress
  KongPrivateDNSAddress:
    Description: The private DNS address of the Kong ALB
    Value: !GetAtt KongInternalApplicationLoadBalancer.DNSName
    Export:
      Name: KongPrivateDNSAddress
  KongECSCluster:
    Description: The Kong ECS Cluster Resource
    Value: !Ref KongECSCluster
    Export:
      Name: KongECSCluster
  KongServiceName:
    Description: The Kong Service Name
    Value: !GetAtt KongService.Name
    Export:
      Name: KongServiceName
