AWSTemplateFormatVersion: '2010-09-09'
Description: "Manages an the infrastructure and applications for the Kong API Gateway and associated Administration UI"

Parameters:
  LatestAmiId:
    Description: "The Latest AMI with the ECS Agent"
    Type: "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>"
    Default: "/aws/service/ecs/optimized-ami/amazon-linux/recommended/image_id"
  SelectedVPC:
    Description: "The VPC in which to install Kong"
    Type: "AWS::EC2::VPC::Id"
  KeyPair:
    Description: "The KeyPair to associate with EC2 instances"
    Type: "AWS::EC2::KeyPair::KeyName"
    ConstraintDescription: "Must be the name of an existing EC2 KeyPair."
  ImageSize:
    Description: "The size of the EC2 images added to the ECS cluster"
    Type: "String"
    Default: t2.small
    AllowedValues:
    - t1.micro
    - t2.nano
    - t2.micro
    - t2.small
  KongDatabaseName: # TODO: Provide Validations
    Type: "String"
    Default: "kong"
  KongaDatabaseName: # TODO: Provide Validations
    Type: "String"
    Default: "konga"
  DatabaseUser: # TODO: Provide Validations
    Type: "String"
    Default: "kong"
  DatabasePassword:
    Type: "String"
    NoEcho: true
    MinLength: "16"
    MaxLength: "32"
    ConstraintDescription: "Must be a String between 16 and 32 characters long."
  DatabaseSnapshotName:
    Type: "String"
    Default: ""

Conditions:
  UseDatabaseSnapshot: !Not [ !Equals [ !Ref DatabaseSnapshotName, "" ] ]

# TODO: Obviously these should be auto-generated and not hardcoded.
Mappings:
  VPCSubnets:
    vpc-c107d5ba:
      useast1a: subnet-84fcacd9
      useast1b: subnet-1ad1d47e
      useast1c: subnet-cd0955e2
      useast1d: subnet-e631d5ac
      useast1e: subnet-77174748
      useast1f: subnet-e95680e6

Resources:

  ###########################################################
  #                                                         #
  #   S3 BUCKETS                                            #
  #                                                         #
  ###########################################################

  # S3Bucket:
    # Type: "AWS::S3::Bucket"
    # Properties: {}


  ###########################################################
  #                                                         #
  #   SECURITY GROUPS                                       #
  #                                                         #
  ###########################################################

  ## BEGIN Circular Reference between KongALBSecurityGroup and KongSecurityGroup ##

  KongALBSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupName: "Kong ALB"
      GroupDescription: !Sub "Security Group for Kong Load Balancer (${SelectedVPC})"
      VpcId: !Ref SelectedVPC

  KongSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupName: "Kong ECS"
      GroupDescription: !Sub "Security Group for Kong ECS (${SelectedVPC})"
      VpcId: !Ref SelectedVPC

  KongALBSecurityGroupAllowsKongSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref KongALBSecurityGroup
      Description: "Internal Port Exposure for Kong ECS Back-Routing"
      SourceSecurityGroupId: !Ref KongSecurityGroup
      IpProtocol: tcp
      ToPort: 8080
      FromPort: 8080

  KongSecurityGroupAllowsKongALBSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref KongSecurityGroup
      Description: "Insecure Proxy Port Exposure for ALB Ingress"
      SourceSecurityGroupId: !Ref KongALBSecurityGroup
      IpProtocol: tcp
      ToPort: 8000
      FromPort: 8000
  ## END Circular References

  KongaSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupName: "Konga ECS"
      GroupDescription: !Sub "Security Group for Kongs ECS (${SelectedVPC})"
      VpcId: !Ref SelectedVPC
      SecurityGroupIngress:
      - Description: "Konga Port Exposure for ALB Ingress"
        SourceSecurityGroupId: !Ref KongALBSecurityGroup
        IpProtocol: tcp
        FromPort: 1337
        ToPort: 1337

  KongDatabaseSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupName: "Kong RDS"
      GroupDescription: !Sub "Security Group for Kong RDS (${SelectedVPC})"
      VpcId: !Ref SelectedVPC
      SecurityGroupIngress:
      - Description: "Ingress from Kong Proxy ECS"
        SourceSecurityGroupId: !Ref KongSecurityGroup
        IpProtocol: tcp
        FromPort: 5432
        ToPort: 5432
      - Description: "Ingress from Konga/Admin ECS"
        SourceSecurityGroupId: !Ref KongaSecurityGroup
        IpProtocol: tcp
        FromPort: 5432
        ToPort: 5432

  ###########################################################
  #                                                         #
  #   SSL CERTIFICATES                                      #
  #                                                         #
  ###########################################################

  KongaSSLCertificate:
    Type: "AWS::CertificateManager::Certificate"
    Properties:
      DomainName: kong.console.bonkers.tech

  ###########################################################
  #                                                         #
  #   RDS DATABASES                                         #
  #                                                         #
  ###########################################################

  KongDatabase:
    Type: "AWS::RDS::DBInstance"
    DeletionPolicy: "Snapshot"
    Properties:
      AllocatedStorage: "20"
      AllowMajorVersionUpgrade: false
      AutoMinorVersionUpgrade: true
      BackupRetentionPeriod: "2"
      DBInstanceClass: "db.t2.micro"
      DBName:
        Fn::If:
        - UseDatabaseSnapshot
        - !Ref AWS::NoValue
        - !Ref KongDatabaseName
      DBSnapshotIdentifier:
        Fn::If:
        - UseDatabaseSnapshot
        - !Ref DatabaseSnapshotName
        - !Ref AWS::NoValue
      Engine: "postgres"
      EngineVersion: "9.6.6"
      MasterUsername: !Ref DatabaseUser
      MasterUserPassword: !Ref DatabasePassword
      PubliclyAccessible: true
      # For Read replicas in the future! See docs for more info
      # SourceDBInstanceIdentifier: String
      VPCSecurityGroups:
        - !ImportValue PersonalPostgresIngress
        - !Ref KongDatabaseSecurityGroup

  ###########################################################
  #                                                         #
  #   ECS CLUSTERS                                          #
  #                                                         #
  ###########################################################
  KongECSCluster:
    Type: "AWS::ECS::Cluster"
    Properties: {}

  ###########################################################
  #                                                         #
  #   EC2 INSTANCES (ECS)                                   #
  #                                                         #
  ###########################################################
  KongECSInstance:
    Type: "AWS::EC2::Instance"
    CreationPolicy:
      ResourceSignal:
        Timeout: PT5M
    Metadata:
      Comment: Install CFN Init, CFN Hup, and ECS Config
      AWS::CloudFormation::Init:
        configSets:
          SetupEnvironment:
          - setupCfnHup
          - setupECSConfig
          UpdateEnvironment:
          - setupECSConfig
        setupECSConfig:
          files:
            "/etc/ecs/ecs.config":
              content: !Sub |
                ECS_CLUSTER=${KongECSCluster}
              mode: "000400"
              owner: "root"
              group: "root"
        setupCfnHup:
          files:
            "/etc/cfn/cfn-hup.conf":
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                interval=10
                verbose=true
              mode: "000400"
              owner: "root"
              group: "root"
            "/etc/cfn/hooks.d/cfn-auto-reloader.conf":
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.KongECSInstance.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init --verbose --stack ${AWS::StackName} --resource KongECSInstance --region ${AWS::Region} --configsets UpdateEnvironment
                runas=root
              mode: "000400"
              owner: "root"
              group: "root"
          services:
            sysvinit:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                - '/etc/cfn/cfn-hup.conf'
                - '/etc/cfn/hooks.d/cfn-auto-reloader.conf'
    Properties:
      KeyName: !Ref KeyPair
      IamInstanceProfile: !ImportValue ecsInstanceRole
      ImageId: !Ref LatestAmiId
      InstanceType: !Ref ImageSize
      SecurityGroupIds:
        - !Ref KongSecurityGroup
        - !ImportValue PersonalSSHIngress
      UserData:
        "Fn::Base64":
          !Sub |
            #!/bin/bash -xe

            # Get the latest CloudFormation package
            yum install -y aws-cfn-bootstrap
            # Start cfn-init
            /opt/aws/bin/cfn-init --verbose --stack ${AWS::StackName} --resource KongECSInstance --region ${AWS::Region} --configsets SetupEnvironment,UpdateEnvironment
            # All done so signal success
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource KongECSInstance --region ${AWS::Region}

  KongaECSInstance:
    Type: "AWS::EC2::Instance"
    CreationPolicy:
      ResourceSignal:
        Timeout: PT5M
    Metadata:
      Comment: Install CFN Init, CFN Hup, and ECS Config
      AWS::CloudFormation::Init:
        configSets:
          SetupEnvironment:
          - setupCfnHup
          - setupECSConfig
          UpdateEnvironment:
          - setupECSConfig
        setupECSConfig:
          files:
            "/etc/ecs/ecs.config":
              content: !Sub |
                ECS_CLUSTER=${KongECSCluster}
              mode: "000400"
              owner: "root"
              group: "root"
        setupCfnHup:
          files:
            "/etc/cfn/cfn-hup.conf":
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                interval=10
                verbose=true
              mode: "000400"
              owner: "root"
              group: "root"
            "/etc/cfn/hooks.d/cfn-auto-reloader.conf":
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.KongaECSInstance.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init --verbose --stack ${AWS::StackName} --resource KongaECSInstance --region ${AWS::Region} --configsets UpdateEnvironment
                runas=root
              mode: "000400"
              owner: "root"
              group: "root"
          services:
            sysvinit:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                - '/etc/cfn/cfn-hup.conf'
                - '/etc/cfn/hooks.d/cfn-auto-reloader.conf'
    Properties:
      KeyName: !Ref KeyPair
      IamInstanceProfile: !ImportValue ecsInstanceRole
      ImageId: !Ref LatestAmiId
      InstanceType: !Ref ImageSize
      SecurityGroupIds:
        - !Ref KongaSecurityGroup
        - !ImportValue PersonalSSHIngress
      UserData:
        "Fn::Base64":
          !Sub |
            #!/bin/bash -xe

            # Get the latest CloudFormation package
            yum install -y aws-cfn-bootstrap
            # Start cfn-init
            /opt/aws/bin/cfn-init --verbose --stack ${AWS::StackName} --resource KongaECSInstance --region ${AWS::Region} --configsets SetupEnvironment,UpdateEnvironment
            # All done so signal success
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource KongaECSInstance --region ${AWS::Region}

  ###########################################################
  #                                                         #
  #   ECS TASK DEFINITIONS                                  #
  #                                                         #
  ###########################################################
  KongTaskDefinition:
    Type: "AWS::ECS::TaskDefinition"
    Properties:
      Family: "kong"
      ContainerDefinitions:
        - Cpu: 1024
          Environment:
          - Name: "KONG_DATABASE"
            Value: "postgres"
          - Name: "KONG_PG_HOST"
            Value: !GetAtt KongDatabase.Endpoint.Address
          - Name: "KONG_PG_DATABASE"
            Value: !Ref KongDatabaseName
          - Name: "KONG_PG_USER"
            Value: !Ref DatabaseUser
          - Name: "KONG_PG_PASSWORD"
            Value: !Ref DatabasePassword
          - Name: "KONG_PROXY_ACCESS_LOG"
            Value: "/dev/stdout"
          - Name: "KONG_PROXY_ERROR_LOG"
            Value: "/dev/stderr"
          Image: "kong:latest"
          Memory: 768
          Name: "kong"
          PortMappings:
          - ContainerPort: 8000
            HostPort: 8000
            Protocol: "tcp"

  KongaTaskDefinition:
    Type: "AWS::ECS::TaskDefinition"
    Properties:
      Family: "konga"
      ContainerDefinitions:
        - Cpu: 512
          Environment:
          - Name: "DB_ADAPTER"
            Value: "postgres"
          - Name: "DB_HOST"
            Value: !GetAtt KongDatabase.Endpoint.Address
          - Name: "DB_DATABASE"
            Value: !Ref KongaDatabaseName
          - Name: "DB_USER"
            Value: !Ref DatabaseUser
          - Name: "DB_PASSWORD"
            Value: !Ref DatabasePassword
          - Name: "NODE_ENV"
            Value: "production"
          Image: "pantsel/konga:latest"
          Links:
          - "kongadmin:kongadmin"
          Memory: 768
          Name: "konga"
          PortMappings:
          - ContainerPort: 1337
            HostPort: 1337
            Protocol: "tcp"
        - Cpu: 512
          Environment:
          - Name: "KONG_DATABASE"
            Value: "postgres"
          - Name: "KONG_PG_HOST"
            Value: !GetAtt KongDatabase.Endpoint.Address
          - Name: "KONG_PG_DATABASE"
            Value: !Ref KongDatabaseName
          - Name: "KONG_PG_USER"
            Value: !Ref DatabaseUser
          - Name: "KONG_PG_PASSWORD"
            Value: !Ref DatabasePassword
          - Name: "KONG_ADMIN_ACCESS_LOG"
            Value: "/dev/stdout"
          - Name: "KONG_ADMIN_ERROR_LOG"
            Value: "/dev/stderr"
          - Name: "KONG_ADMIN_LISTEN"
            Value: "0.0.0.0:8001"
          Image: "kong:latest"
          Memory: 128
          Name: "kongadmin"
          PortMappings:
          - ContainerPort: 8001
            HostPort: 8001
            Protocol: "tcp"

  ###########################################################
  #                                                         #
  #   ECS SERVICE DEFINITIONS                               #
  #                                                         #
  ###########################################################

  KongService:
    Type: "AWS::ECS::Service"
    DependsOn: KongECSInstance
    Properties:
      Cluster: !Ref KongECSCluster
      ServiceName: "kong"
      TaskDefinition: !Ref KongTaskDefinition
      Role: !ImportValue ecsServiceRole
      DesiredCount: 1
      LoadBalancers:
      - ContainerName: "kong"
        ContainerPort: 8000
        TargetGroupArn: !Ref KongALBTargetGroup
      # DeploymentConfiguration:
        # MaximumPercent: Integer
        # MinimumHealthyPercent: Integer

  KongaService:
    Type: "AWS::ECS::Service"
    DependsOn: KongaECSInstance
    Properties:
      Cluster: !Ref KongECSCluster
      ServiceName: "konga"
      TaskDefinition: !Ref KongaTaskDefinition
      Role: !ImportValue ecsServiceRole
      DesiredCount: 1
      LoadBalancers:
      - ContainerName: "konga"
        ContainerPort: 1337
        TargetGroupArn: !Ref KongaALBTargetGroup
      # DeploymentConfiguration:
        # MaximumPercent: Integer
        # MinimumHealthyPercent: Integer

  ###########################################################
  #                                                         #
  #   ELB v2 TARGET GROUPS                                  #
  #                                                         #
  ###########################################################

  KongALBTargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      Name: !Join [ "-", [ "Kong", !Ref "AWS::Region" ] ]
      Port: 8000
      Protocol: "HTTP"
      HealthCheckProtocol: "HTTP"
      HealthCheckPort: "traffic-port"
      HealthCheckPath: "/"
      Matcher:
        HttpCode: 404
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 5
      UnhealthyThresholdCount: 3
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: 300
      - Key: stickiness.enabled
        Value: false
      TargetType: "instance"
      VpcId: !Ref SelectedVPC

  KongaALBTargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      Name: !Join [ "-", [ "Konga", !Ref "AWS::Region" ] ]
      Port: 1337
      Protocol: "HTTP"
      HealthCheckProtocol: "HTTP"
      HealthCheckPort: "traffic-port"
      HealthCheckPath: "/"
      Matcher:
        HttpCode: 200
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 5
      UnhealthyThresholdCount: 3
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: 300
      - Key: stickiness.enabled
        Value: false
      TargetType: "instance"
      VpcId: !Ref SelectedVPC

  ###########################################################
  #                                                         #
  #   ELB v2 APPLICATION LOAD BALANCERS                     #
  #                                                         #
  ###########################################################
  KongApplicationLoadBalancer:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      SecurityGroups:
      - !Ref KongALBSecurityGroup
      - !ImportValue PublicHTTPSIngress
      Subnets:
      - !FindInMap [VPCSubnets, !Ref SelectedVPC, useast1a]
      - !FindInMap [VPCSubnets, !Ref SelectedVPC, useast1c]
      - !FindInMap [VPCSubnets, !Ref SelectedVPC, useast1d]
      Type: application
      Scheme: internet-facing
      IpAddressType: ipv4
      LoadBalancerAttributes:
      - Key: deletion_protection.enabled
        Value: false
      - Key: idle_timeout.timeout_seconds
        Value: 60
      - Key: routing.http2.enabled
        Value: true
      - Key: access_logs.s3.enabled
        Value: false

  ###########################################################
  #                                                         #
  #   ELB v2 ALB LISTENERS                                  #
  #                                                         #
  ###########################################################
  KongALBSecureListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      LoadBalancerArn: !Ref KongApplicationLoadBalancer
      Certificates:
      - CertificateArn: !Ref KongaSSLCertificate
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref KongALBTargetGroup
      Port: 443
      Protocol: HTTPS

  KongALBInternalListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      LoadBalancerArn: !Ref KongApplicationLoadBalancer
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref KongALBTargetGroup # Send back to Kong (beware circular references)
      Port: 8080
      Protocol: HTTP

  ###########################################################
  #                                                         #
  #   ELB v2 ALB RULE CONFIGURATIONS (Konga)                #
  #                                                         #
  ###########################################################
  KongaListenerRule:
    Type: "AWS::ElasticLoadBalancingV2::ListenerRule"
    Properties:
      Actions:
      - Type: forward
        TargetGroupArn: !Ref KongaALBTargetGroup
      Conditions:
      - Field: host-header
        Values:
        - "kong.console.bonkers.tech"
      ListenerArn: !Ref KongALBSecureListener
      Priority: 1

Outputs:
  KongALBSecurityGroup:
    Description: SG to be assigned to the Kong ALB
    Value: !Ref KongALBSecurityGroup
    Export:
      Name: KongALBSecurityGroup
  KongSecurityGroup:
    Description: SG to be assigned to the Kong ECS Instances
    Value: !Ref KongSecurityGroup
    Export:
      Name: KongSecurityGroup
  KongaSecurityGroup:
    Description: SG to be assigned to the Konga/Admin ECS Instances
    Value: !Ref KongaSecurityGroup
    Export:
      Name: KongaSecurityGroup
  KongDatabaseSecurityGroup:
    Description: SG to be assigned to the Kong RDS cluster
    Value: !Ref KongDatabaseSecurityGroup
    Export:
      Name: KongDatabaseSecurityGroup
  KongApplicationLoadBalancer:
    Description: Kong Application Load Balancer
    Value: !Ref KongApplicationLoadBalancer
    Export:
      Name: KongApplicationLoadBalancer
  KongALBSecureListener:
    Description: The secure/public Kong ALB Listener for attaching certificates to
    Value: !Ref KongALBSecureListener
    Export:
      Name: KongALBSecureListener
  KongALBInternalListener:
    Description: Kong ALB Internal Loopback Listener for attaching target group rules to
    Value: !Ref KongALBInternalListener
    Export:
      Name: KongALBInternalListener
  PublicDNSAddress:
    Description: The public DNS address of the Kong ALB
    Value: !GetAtt KongApplicationLoadBalancer.DNSName
